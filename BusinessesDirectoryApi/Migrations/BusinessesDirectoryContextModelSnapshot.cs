// <auto-generated />
using System;
using BusinessesDirectoryApi.Models.ContextModel;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BusinessesDirectoryApi.Migrations
{
    [DbContext(typeof(BusinessesDirectoryContext))]
    partial class BusinessesDirectoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BusinessesDirectoryApi.Models.AdministrationModels.BusinessType", b =>
                {
                    b.Property<Guid>("BusinessTypeId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("BusinessTypeDescription")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<string>("BusinessTypeName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("BusinessTypeNormalizedName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long>("BusinessTypeRecordId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("ModifiedAt");

                    b.HasKey("BusinessTypeId")
                        .HasName("BusinessTypeId_PK")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("BusinessTypeRecordId")
                        .IsUnique()
                        .HasName("BusinessRecordId_AIK")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("BusinessType","administration");
                });

            modelBuilder.Entity("BusinessesDirectoryApi.Models.BusinessModels.Business", b =>
                {
                    b.Property<Guid>("BusinessId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("BusinessDaysAndHours")
                        .IsRequired();

                    b.Property<string>("BusinessDescription")
                        .IsRequired()
                        .HasMaxLength(600);

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<long>("BusinessRecordId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("BusinessTypeId");

                    b.Property<Guid>("CityId");

                    b.Property<Guid>("CountryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("HasAthMovil");

                    b.Property<bool>("HasCarryOut");

                    b.Property<bool>("HasDelivery");

                    b.Property<bool>("InDameUnBite");

                    b.Property<string>("InFacebookAs");

                    b.Property<string>("InInstagramAs");

                    b.Property<bool>("InUberEats");

                    b.Property<bool>("InUva");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("PrimaryPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("SecondaryPhoneNumber")
                        .HasMaxLength(20);

                    b.Property<Guid>("StateId");

                    b.HasKey("BusinessId")
                        .HasName("BusinessId_Primary_Key")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("BusinessRecordId")
                        .IsUnique()
                        .HasName("BusinessRecordId_AIK")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("BusinessTypeId")
                        .HasName("BusinessTypeId_To_BusinessTable_FK");

                    b.HasIndex("CityId", "StateId", "CountryId")
                        .HasName("CityId_StateId_CountryId_To_BusinessTable_FK");

                    b.ToTable("Business","dbo");
                });

            modelBuilder.Entity("BusinessesDirectoryApi.Models.LocationModels.City", b =>
                {
                    b.Property<Guid>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("StateId");

                    b.Property<Guid>("CountryId");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("CityNormalizedName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long>("CityRecordId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("ModifiedAt");

                    b.HasKey("CityId", "StateId", "CountryId")
                        .HasName("CityId_StateId_CountryId_PK")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CityRecordId")
                        .IsUnique()
                        .HasName("CityRecordId_AIK")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("StateId", "CountryId")
                        .HasName("StateId_CountryId_To_CityTable_FK");

                    b.ToTable("City","location");
                });

            modelBuilder.Entity("BusinessesDirectoryApi.Models.LocationModels.Country", b =>
                {
                    b.Property<Guid>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("CountryNormalizedName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long>("CountryRecordId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<long>("IsoNumber")
                        .HasMaxLength(3);

                    b.Property<string>("IsoThree")
                        .IsRequired()
                        .HasMaxLength(3);

                    b.Property<string>("IsoTwo")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.Property<DateTime?>("ModifiedAt");

                    b.HasKey("CountryId")
                        .HasName("CountryId_PK")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CountryRecordId")
                        .IsUnique()
                        .HasName("CountryRecordId_AIK")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("Country","location");
                });

            modelBuilder.Entity("BusinessesDirectoryApi.Models.LocationModels.State", b =>
                {
                    b.Property<Guid>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("CountryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("StateCode")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("StateNormalizedName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long>("StateRecordId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("StateId", "CountryId")
                        .HasName("StateId_CountryId_PK")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CountryId")
                        .HasName("CountryId_To_StateTable_FK");

                    b.HasIndex("StateRecordId")
                        .IsUnique()
                        .HasName("StateRecordId_AIK")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("State","location");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BusinessesDirectoryApi.Models.BusinessModels.Business", b =>
                {
                    b.HasOne("BusinessesDirectoryApi.Models.AdministrationModels.BusinessType", "BusinessType")
                        .WithMany("Business")
                        .HasForeignKey("BusinessTypeId")
                        .HasConstraintName("BusinessType_To_Business_Fk");

                    b.HasOne("BusinessesDirectoryApi.Models.LocationModels.City", "City")
                        .WithMany("Business")
                        .HasForeignKey("CityId", "StateId", "CountryId")
                        .HasConstraintName("City_To_Business_Fk");
                });

            modelBuilder.Entity("BusinessesDirectoryApi.Models.LocationModels.City", b =>
                {
                    b.HasOne("BusinessesDirectoryApi.Models.LocationModels.State", "State")
                        .WithMany("City")
                        .HasForeignKey("StateId", "CountryId")
                        .HasConstraintName("State_To_City_FK");
                });

            modelBuilder.Entity("BusinessesDirectoryApi.Models.LocationModels.State", b =>
                {
                    b.HasOne("BusinessesDirectoryApi.Models.LocationModels.Country", "Country")
                        .WithMany("State")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("Country_To_State_FK");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
